BOTS

Protoss: Auir, McRave
Terran: BGHBot, nova
Zerg: BlackCrow, BBQ, ZZZKBot
Random: GuttersnipeWiggins, OpprimoBot, ualbertabot

STRUCTURE

BotName: Common\Path
  # Comments
  Task: <BWAPI direct code>  // FileName[line]
    Subtask Conditions: <code>[summery]  // FileName[line]

================================================================================

AIUR: src\
  # Zerg logic @ ConstructionManager.cpp[314]
  # Terran logic @ ConstructionManager.cpp[386]
  # collection rate per worker = 8/180.0  // WorkerManager.cpp[329]
  Building: {Contractor}->build({Placement}, b->type);  // ConstructionManager.cpp[353]
    Contractor: b->builderUnit = [closest] b->type.whatBuilds().first  // ConstructionManager.cpp[64]
    Placement: b->tilePosition = [spiral search w/ 1tile padding] if getUnitsOnTile isLifted  // BuildingPlacer.cpp[113]
    MoveTo: !{Contractor}->isConstructing && ![withinDist] then {Contractor}->rightClick({Placement})  // ConstructionManager.cpp[344]
    Product: b->buildingUnit = getUnitsOnTile({Position}) IsType && !IsLift  // ConstructionManager.cpp[306]
    Death: !{Contractor}->isConstructing() || !{Product}->isBeingConstructed() then {Contractor}->rightClick({Product});  // ConstructionManager.cpp[386]
    Return: {Contractor} IsPlayerGuard then {Contractor}->rightClick(resource)  // WorkerManager.cpp[344]

McRave: McRave\
  # Terran logic BuildManager.cpp[21]
  Building: {Contractor}->build(worker.getBuildingType(), {Position})  // WorkerManager.cpp[281]
    Contractor: [Closest by ground] !scouter & !IsGathering !IsConstructing // WorkerManager.cpp[397]
    Placement: Buildings().getBuildLocation(b.first);  // BuildingManager.cpp[45]
    MoveTo: ![withinDist] {Contractor}.unit()->move(Position({Contractor}.getBuildPosition()));  // WorkerManager.cpp[57]
    Product: building->unit = *onUnitCreate* IsOwned && IsBuilding  // EventManager.cpp[8]
    Death: {Product} !IsCompleted() && !getBuildUnit() [closest free worker].rightClick(building.unit())  // BuildManager.cpp[21]
    Return: IsIdle() && gather [closest MineralField]  // WorkerManager.cpp[313]

BGHBot: Source\
  # Includes duplicate logic intended for other races
  Building: {Contractor}.getUnit()->build(building_type, {Placement})  // WorkerManager.cpp[623]
    Contractor: new_build_worker = game_state.getMineralWorkers()->begin() IsComplete  // ExampleAIModule.cpp[869]
    Placement: build_position = [from BWEM and additional checks]  // WorkerManager.cpp[818]
    MoveTo: !{Build} then {Contractor}.getUnit->move((BWAPI::Placement){Placement});  // WorkerManager.cpp[140]
    Product: *onUnitCreate* IsBuilding && IsOwned  // ExampleAIModule.cpp[327]
    Death: !IsCompleted && !IsBeginConstructed then [getNewBuilderWorker]  // MacroManager.cpp[25]
    Return: {Contractor} !IsMining && !IsMoving then {Contractor}->gather([mineral in area])  // WorkerManager.cpp[254]

nova: ExampleAIModule\Source\
  Building: {Contractor}->build(workerData->buildType, {Placement});  // WorkerManager.cpp[76]
    Contractor: workerData->worker = [closer] Scouting | !IsCarrying | IsGathering;  // WorkerManager.cpp[190]
    Placement: workerData->build = [spiral search w/ free space check buildMap] // BuildManager.cpp[481]
    MoveTo: ![IsEntireBuildPositionVisible] then {Contractor}->move(Placement({Placement));  // WorkerManager.cpp[75]
    Product: Broodwar->self()->getUnits() IsBuilding;  // WorkerManager.cpp[535];
    Death: {Product} !IsComplete && !getBuildUnit && [no nearby enemies] then [create new build job] // WorkerManager.cpp[532]
    Return:
        1. *onUnitComplete* [worker building at buildPosition] setJobAndExecute(State::Gathering_Mineral, workerData);  // WorkerManager.cpp[233]
        2. Order == PlayerGaurd && [buildExist] then setJobAndExecute(
            State::Building, workerData, nullptr, {Placement}, workerData->buildType);  // WorkerManager.cpp[416]

BlackCrow: src\
  Building: {Contractor}->build(type, {Placement})  // Planned.cpp[136]
    Contractor: droneOrBuilding = [worker from mineral with greatest miners]  // Planned.cpp[119]
    Placement: buildPosition = [checks each tile with nested vector map.tiles]  // Builder.cpp[110]
    MoveTo: ![{Contractor} in vision {Placement}]  // Planned.cpp[134]
    Product: {Contractor} IsBuilding  // Planned.cpp[150]
    Death: !{Product}->exists() then [remove plannedBuilding]  // Planned.cpp[126]
    Return: CAN'T ZERG RACE

ZZZKBot: ZZZKBot\Source\
  Building: {Contractor}->build(buildingType, {Placement});  // ZZZKBotAIModule.cpp[2909]
    Contractor: builder = [closest to base, IsIdle | IsGatheringMineral | !IsCarryingGas, && isAvailableToBuild)  // ZZZKBotAIModule.cpp[2841]
    Placement: targetBuildLoc = Broodwar->getBuildLocation(buildingType, {Contractor}->getTilePosition())  // ZZZKBotAIModule.cpp[2883]
    MoveTo: {Position}.isValid() && !{Contractor}->canBuild(buildingType) && buildType == Spawning_Pool  // ZZZKBotAIModule.cpp[2889]
    Product: [count of all UnitType] > 1;  // ZZZKBotAIModule.cpp[2599]
    Death: !{Contractor}->exists() then [get new builder]  // ZZZKBotAIModule.cpp[2811]
    Return: CAN'T ZERG RACE

GuttersnipeWiggins: .\
  Building: {Contractor}->build(Job.constructable, {Placement})  // BuildingConstructer.cpp[136]
    Contractor: Job.contractor = getClosestUnit(IsWorker && IsOwned && [moveToMinerals], 300)  // BuildingConstructer.cpp[90]
    Placement: Job.location = BWAPI::Broodwar->getBuildLocation(Constructable, {Contractor}->getTilePosition(), 20);  // BuildingConstructer.cpp[229]
    MoveTo: {Contractor}->move(BWAPI::Placement({Placement}))  // BuildingConstructer.cpp[102]
    Product: *onUnitCreate* IsOwned [building case]  // GuttersnipeWiggins.cpp[71]
    Death: {Contractor}->getOrders() == Unknown then [cancel construction and restart]
    Return: build then {Contractor}->gather(closestMineral, true);

OpprimoBot: SCProjects\OpprimoBot\Source\
  Building: {Contractor}->build(toBuild, {Placement});  // MainAgents\WorkerAgent.cpp[294]
    Contractor: unit = [closest] isGatheringMinerals & !toBuild  // MainAgents\WorkerAgent.cpp[180]
    Placement: buildSpot = [square radius search !padding] canBuildAt  // BuildingPlacer.cpp[360]
    MoveTo: !{Position}.isExplored() then {Contractor}->rightClick([center of {Placement}])  // MainAgents\WorkerAgent.cpp[285]
    Product: [unit agent] IsBuilding  // Commander\Commander.cpp[642]
    Death: {Product} !getBuildUnit()->isConstructing() then [closest free worker].rightClick({Product}) // Commander\Commander.cpp[642]
    Return: {Contractor}->getTarget() !IsBeginConstructed && {Contractor}->isIdle() then {Contractor}->rightClick([closest])  // WorkerAgent.cpp[313]

ualbertabot: UAlbertaBot\Source
  Building: {Contractor}->build(b.type,{Position})  // BuildingManager.cpp[148]
    Contractor: b.builderUnit = [closest] IsComplete() IsGatheringMinerals  // WorkerManager.cpp[408]
    Placement: b.finalPosition =  [checks area size + padding for reservation]  // BuildingPlacer.cpp[122]
    MoveTo: !{Contractor}->isConstructing() && ![{Placement} entirely explored]  // BuildingPlacer.cpp[118]
    Product: b.buildingUnit = Broodwar->self()->getUnits() IsBuilding && getTilePosition == {Position};  // WorkerManager.cpp[535];
    Death: [empty]  // BuildingManager.cpp[224]
    Return: {Unit}->isComplete() then [release worker]  // BuildingManager.cpp[240]

BroodwarBotQ: src\Macro
  # HP for building cancel = 50
  # Protoss logic  // Builder.cpp[282]
  # onOffer is defined, but used only in Arbitrator\Arbitrator.h[488]
  # Makes decisions with a bidding system through the Arbitrator
  Building: {Contractor}->build({Position}, type))  // Builder.cpp[301]
    Contractor:
    MoveTo: ![withinDist] then worker->move(Position(tilePosition));  // Builder.cpp[282]
    Placement:
    Death: 
    Return:

================================================================================

TASKS, SUBTASKS & BWAPI DIRECT SEARCH TERMS

Building:
  Contractor: whatBuilds, IsIdle, IsGathering, IsCarrying, IsConstructing, getClosestUnit
  Placement: canBuild, getBuildLocation, getUnitsOnTile
  MoveTo: move, rightClick, !IsConstructing, !build, canBuild, !IsExplored
  Death of constructor: !Exists, !IsConstructing, !IsBeingContructed, rightClick, !IsCompleted, getBuildUnit
  Return to gathering (P/T): IsPlayerGuard, rightClick, IsIdle, gather, IsMining IsMoving, build, IsBeginConstructed
